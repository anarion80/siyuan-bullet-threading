@use "sass:math";
@use "styles/common" as *;

$action-h: 34px;
$action-w: $action-h;

$width: $action-w;
$left: 0 - math.div($action-w, 2) - 1px;
$top: 0 - math.div($action-w, 2) - 3px;
$height: $action-h + 4px;

@mixin border {
    content: "";
    display: block;
    position: absolute;
    pointer-events: none;
    width: $width;
    left: $left;
    top: $top;

    border: {
        style: solid;
        color: get($text, "brand");
    }
}

.li>.protyle-action {
    height: $height;
    line-height: $action-h;
}

// #layouts div.layout-tab-container>div.protyle>div.protyle-content>div.protyle-wysiwyg div.li[data-node-id]:before {
//     // height: calc(100% - ($height + 12px));
//     top: $height;
// }

// #layouts div.layout-tab-container>div.protyle>div.protyle-content>div.protyle-wysiwyg div.li[data-node-id]:not([data-subtype=o]):before {
//     top: $height; /* Your desired value */
// }

.protyle-wysiwyg [data-node-id].li:has(.rc-focus) {
    &::before {
        --b3-theme-background-light: rgba(255, 255, 255, 0);
        --b3-scroll-color: rgba(255, 255, 255, 0);
      }

    >.protyle-action {
        color: get($text, "brand");

        svg {
            @include svg(16px);
        }
    }

    >.list:has(.rc-focus) {
        >.li {
            &::before {
                @include border();
                height: calc(100% - 8px);
                top: $top !important;
            }

            &:not(:has(.rc-focus))::before {
                bottom: -2px;
                height: calc(100% + 8px);

                border: {
                    width: 0 0 0 2px;
                }
            }

            &:has(.rc-focus) {
                &::before {
                height: calc(#{$height} + var(--list-action-offset-sum, 0px)); // -2 px

                    border: {
                        radius: 0 0 0 get($radius, "large");
                        width: 0 0 2px 2px;
                    }
                }

                ~.li:not(:has(.rc-focus))::before {
                    border-color: transparent;
                }
            }

            // Ordered list bullets
            &[data-subtype="o"]::before {
                width: $width - 10px;
            }

            // TO DO list bullets
            &[data-subtype="t"]::before {
                width: $width - 7px;
            }
        }
    }

    >[data-node-id] {
        &::before {
            @include border();
            top: math.div($action-w, 2) + 3px;
            height: calc(100% + 8px);

            border: {
                width: 0 0 0 2px;
            }
        }

        // correct edges at the curve
        &:has(+ .list)::before {
            height: auto;
            bottom: 0;
        }

        &[data-type="NodeHeading"]::after {
            top: 0;
            height: calc(185%);
        }

        &.list,
        &.bq,
        &.sb {

            // focused block
            &:has(.rc-focus)::before,
            // block before focused block
            &:has(.rc-focus)~[data-node-id]::before {
                border-color: transparent;
            }
        }
    }

    &[fold="1"]>[data-node-id]::before,
    &:has(> .rc-focus)>[data-node-id]::before {
        border-color: transparent;
    }

    // Ordered list items
    &[data-subtype="o"]:has(.rc-focus) {
        >[data-node-id] {
            &::before {
                top: calc(math.div($action-w, 2) + 11px + var(--list-action-offset-sum, 0px));
            }
        }
        >.list:has(.rc-focus)>.li {
            &::before {
                top: $top + 10px !important;
            }

            &:has(.rc-focus)::before {
                // height: $height - 10px;
                height: calc(#{$height} + var(--list-action-offset-sum, 0px) - 10px);
            }
        }
    }

    // to do list items
    &[data-subtype="t"]:has(.rc-focus) {
        >[data-node-id] {
            &::before {
                top: calc(math.div($action-w, 2) + 9px + var(--list-action-offset-sum, 0px));
            }
        }
        >.protyle-action {
            color: get($text, "brand");

            svg {
                @include svg(14px);
            }
        }

        >.list:has(.rc-focus)>.li {
            &::before {
                top: $top + 12px !important;
            }

            &:has(.rc-focus)::before {
                // height: $height - 12px;
                height: calc(#{$height} + var(--list-action-offset-sum, 0px) - 12px);
            }
        }

        &.protyle-task--done>.list:has(.rc-focus)>.li::before {
            border-color: get($border, 1);
        }
    }
}
